# Generated from IsiLanguage.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from vartypes import *
from exceptions import SemanticException


def serializedATN():
    return [
        4,0,23,178,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,140,
        8,17,1,18,1,18,1,19,3,19,145,8,19,1,19,5,19,148,8,19,10,19,12,19,
        151,9,19,1,20,1,20,5,20,155,8,20,10,20,12,20,158,9,20,1,20,1,20,
        1,21,4,21,163,8,21,11,21,12,21,164,1,21,1,21,4,21,169,8,21,11,21,
        12,21,170,3,21,173,8,21,1,22,1,22,1,22,1,22,0,0,23,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,1,0,7,2,0,60,60,62,
        62,3,0,42,43,45,45,47,47,2,0,65,90,97,122,3,0,48,57,65,90,97,122,
        5,0,32,32,44,46,48,57,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,
        186,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,3,56,1,0,0,0,
        5,65,1,0,0,0,7,73,1,0,0,0,9,75,1,0,0,0,11,77,1,0,0,0,13,82,1,0,0,
        0,15,84,1,0,0,0,17,86,1,0,0,0,19,94,1,0,0,0,21,97,1,0,0,0,23,100,
        1,0,0,0,25,106,1,0,0,0,27,108,1,0,0,0,29,110,1,0,0,0,31,116,1,0,
        0,0,33,125,1,0,0,0,35,139,1,0,0,0,37,141,1,0,0,0,39,144,1,0,0,0,
        41,152,1,0,0,0,43,162,1,0,0,0,45,174,1,0,0,0,47,48,5,112,0,0,48,
        49,5,114,0,0,49,50,5,111,0,0,50,51,5,103,0,0,51,52,5,114,0,0,52,
        53,5,97,0,0,53,54,5,109,0,0,54,55,5,97,0,0,55,2,1,0,0,0,56,57,5,
        102,0,0,57,58,5,105,0,0,58,59,5,109,0,0,59,60,5,112,0,0,60,61,5,
        114,0,0,61,62,5,111,0,0,62,63,5,103,0,0,63,64,5,46,0,0,64,4,1,0,
        0,0,65,66,5,100,0,0,66,67,5,101,0,0,67,68,5,99,0,0,68,69,5,108,0,
        0,69,70,5,97,0,0,70,71,5,114,0,0,71,72,5,101,0,0,72,6,1,0,0,0,73,
        74,5,44,0,0,74,8,1,0,0,0,75,76,5,46,0,0,76,10,1,0,0,0,77,78,5,108,
        0,0,78,79,5,101,0,0,79,80,5,105,0,0,80,81,5,97,0,0,81,12,1,0,0,0,
        82,83,5,40,0,0,83,14,1,0,0,0,84,85,5,41,0,0,85,16,1,0,0,0,86,87,
        5,101,0,0,87,88,5,115,0,0,88,89,5,99,0,0,89,90,5,114,0,0,90,91,5,
        101,0,0,91,92,5,118,0,0,92,93,5,97,0,0,93,18,1,0,0,0,94,95,5,58,
        0,0,95,96,5,61,0,0,96,20,1,0,0,0,97,98,5,115,0,0,98,99,5,101,0,0,
        99,22,1,0,0,0,100,101,5,101,0,0,101,102,5,110,0,0,102,103,5,116,
        0,0,103,104,5,97,0,0,104,105,5,111,0,0,105,24,1,0,0,0,106,107,5,
        123,0,0,107,26,1,0,0,0,108,109,5,125,0,0,109,28,1,0,0,0,110,111,
        5,115,0,0,111,112,5,101,0,0,112,113,5,110,0,0,113,114,5,97,0,0,114,
        115,5,111,0,0,115,30,1,0,0,0,116,117,5,101,0,0,117,118,5,110,0,0,
        118,119,5,113,0,0,119,120,5,117,0,0,120,121,5,97,0,0,121,122,5,110,
        0,0,122,123,5,116,0,0,123,124,5,111,0,0,124,32,1,0,0,0,125,126,5,
        102,0,0,126,127,5,97,0,0,127,128,5,99,0,0,128,129,5,97,0,0,129,34,
        1,0,0,0,130,140,7,0,0,0,131,132,5,60,0,0,132,140,5,61,0,0,133,134,
        5,62,0,0,134,140,5,61,0,0,135,136,5,33,0,0,136,140,5,61,0,0,137,
        138,5,61,0,0,138,140,5,61,0,0,139,130,1,0,0,0,139,131,1,0,0,0,139,
        133,1,0,0,0,139,135,1,0,0,0,139,137,1,0,0,0,140,36,1,0,0,0,141,142,
        7,1,0,0,142,38,1,0,0,0,143,145,7,2,0,0,144,143,1,0,0,0,145,149,1,
        0,0,0,146,148,7,3,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,1,
        0,0,0,149,150,1,0,0,0,150,40,1,0,0,0,151,149,1,0,0,0,152,156,5,34,
        0,0,153,155,7,4,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,
        0,0,156,157,1,0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,159,160,5,34,
        0,0,160,42,1,0,0,0,161,163,7,5,0,0,162,161,1,0,0,0,163,164,1,0,0,
        0,164,162,1,0,0,0,164,165,1,0,0,0,165,172,1,0,0,0,166,168,5,46,0,
        0,167,169,7,5,0,0,168,167,1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,
        0,170,171,1,0,0,0,171,173,1,0,0,0,172,166,1,0,0,0,172,173,1,0,0,
        0,173,44,1,0,0,0,174,175,7,6,0,0,175,176,1,0,0,0,176,177,6,22,0,
        0,177,46,1,0,0,0,10,0,139,144,147,149,154,156,164,170,172,1,6,0,
        0
    ]

class IsiLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    OP_REL = 18
    OP_NUM = 19
    ID = 20
    TEXTO = 21
    NUM = 22
    WS = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'programa'", "'fimprog.'", "'declare'", "','", "'.'", "'leia'", 
            "'('", "')'", "'escreva'", "':='", "'se'", "'entao'", "'{'", 
            "'}'", "'senao'", "'enquanto'", "'faca'" ]

    symbolicNames = [ "<INVALID>",
            "OP_REL", "OP_NUM", "ID", "TEXTO", "NUM", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "OP_REL", "OP_NUM", "ID", "TEXTO", 
                  "NUM", "WS" ]

    grammarFileName = "IsiLanguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


        self._symbol_table = {}
        self._atr_var = None
        self._lt_type = VarTypes.UNDEFINED
        self._crt_exp_type = VarTypes.UNDEFINED

    def showIds(self):
        for key, vals in self._symbol_table.items():
            print(key, vals)

    def checkExistingVar(self, var):
        if var not in self._symbol_table:
            raise SemanticException(f"Undeclared Variable: {var}")
        return self._symbol_table[var]

    def checkInitializedVar(self, var):
        if var not in self._symbol_table or not self._symbol_table[var].initialized:
            raise SemanticException(f"Uninitialized Variable: {var}")
        return self._symbol_table[var]

    def initialize(self, var):
        self._symbol_table[var].initialized = True
        return self._symbol_table[var]

    def _update_termo(self, new_type):
        print(self._crt_exp_type, new_type)
        if self._crt_exp_type == VarTypes.UNDEFINED:
            self._crt_exp_type = new_type
        elif self._crt_exp_type != new_type:
            raise SemanticException(f"Expressions types don't match")

    def verify_unused_variables(self):
        for key, vals in self._symbol_table.items():
            if not vals.initialized:
                raise SemanticException(f"Variable created and not used: {key}")



